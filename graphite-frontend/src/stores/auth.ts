// graphite-frontend/src/stores/auth.ts
// ‰øÆÂ§çÁâàÔºöÂ¢ûÂº∫ Token ‰øùÂ≠òÂíåÊó•Âøó

import { defineStore } from 'pinia'
import { ref, computed } from 'vue'
import type { User, LoginRequest } from '@/types'
import { login as loginApi } from '@/api/auth'

export const useAuthStore = defineStore('auth', () => {
  // Áä∂ÊÄÅ
  const token = ref<string | null>(localStorage.getItem('token'))
  const user = ref<User | null>(null)
  const loading = ref(false)

  // ËÆ°ÁÆóÂ±ûÊÄß
  const isAuthenticated = computed(() => !!token.value && !!user.value)
  const isAdmin = computed(() => user.value?.role === 'admin')
  const isEngineer = computed(() => ['admin', 'engineer'].includes(user.value?.role || ''))

  // ÊñπÊ≥ï
  const login = async (credentials: LoginRequest) => {
    try {
      loading.value = true
      console.log('üîê Auth Store: ÂºÄÂßãÁôªÂΩïÊµÅÁ®ã')

      const response = await loginApi(credentials)
      console.log('‚úÖ Auth Store: APIËøîÂõûÊàêÂäü', {
        user: response.user.username,
        tokenLength: response.access_token.length
      })

      // Êõ¥Êñ∞Áä∂ÊÄÅ
      token.value = response.access_token
      user.value = response.user

      // ‰øùÂ≠òÂà∞ localStorage
      console.log('üíæ Auth Store: ‰øùÂ≠òTokenÂà∞localStorage')
      localStorage.setItem('token', response.access_token)
      localStorage.setItem('user', JSON.stringify(response.user))

      // È™åËØÅ‰øùÂ≠ò
      const savedToken = localStorage.getItem('token')
      const savedUser = localStorage.getItem('user')
      console.log('‚úÖ Auth Store: Token‰øùÂ≠òÈ™åËØÅ', {
        tokenSaved: !!savedToken,
        tokenMatches: savedToken === response.access_token,
        userSaved: !!savedUser,
        tokenPreview: savedToken?.substring(0, 30) + '...'
      })

      if (savedToken !== response.access_token) {
        console.error('‚ùå Auth Store: Token‰øùÂ≠òÂ§±Ë¥•ÔºÅ')
        throw new Error('Token‰øùÂ≠òÂ§±Ë¥•')
      }

      return response
    } catch (error) {
      console.error('‚ùå Auth Store: ÁôªÂΩïÂ§±Ë¥•', error)
      throw error
    } finally {
      loading.value = false
    }
  }

  const logout = () => {
    console.log('üëã Auth Store: ÈÄÄÂá∫ÁôªÂΩï')
    token.value = null
    user.value = null
    localStorage.removeItem('token')
    localStorage.removeItem('user')
    console.log('‚úÖ Auth Store: Ê∏ÖÈô§ÂÆåÊàê')
  }

  const initAuth = () => {
    console.log('üîÑ Auth Store: ÂàùÂßãÂåñËÆ§ËØÅÁä∂ÊÄÅ')
    const savedToken = localStorage.getItem('token')
    const savedUser = localStorage.getItem('user')

    if (savedToken && savedUser) {
      token.value = savedToken
      console.log('üìù Auth Store: ÊÅ¢Â§çToken', savedToken.substring(0, 30) + '...')

      try {
        const parsedUser = JSON.parse(savedUser)

        // Â§ÑÁêÜ‰∏çÂêåÊ†ºÂºèÁöÑÁî®Êà∑Êï∞ÊçÆ
        if (parsedUser.roles && Array.isArray(parsedUser.roles)) {
          const roleMapping: { [key: string]: 'admin' | 'engineer' | 'user' } = {
            'Admin': 'admin',
            'Engineer': 'engineer',
            'User': 'user',
            'admin': 'admin',
            'engineer': 'engineer',
            'user': 'user'
          }

          const firstRole = parsedUser.roles[0]
          const mappedRole = roleMapping[firstRole] || 'user'

          user.value = {
            id: parsedUser.id,
            username: parsedUser.username,
            role: mappedRole,
            real_name: parsedUser.real_name,
            email: parsedUser.email,
            created_at: parsedUser.created_at,
            last_login: parsedUser.last_login
          }
        } else {
          user.value = parsedUser
        }

        console.log('‚úÖ Auth Store: Áî®Êà∑ÊÅ¢Â§çÊàêÂäü', user.value.username)
      } catch (error) {
        console.error('‚ùå Auth Store: Ëß£ÊûêÁî®Êà∑Êï∞ÊçÆÂ§±Ë¥•', error)
        logout()
      }
    } else {
      console.log('‚ÑπÔ∏è Auth Store: Êó†‰øùÂ≠òÁöÑËÆ§ËØÅ‰ø°ÊÅØ')
    }
  }

  // Ê£ÄÊü•ÊùÉÈôê
  const hasPermission = (permission: string): boolean => {
    if (!user.value) return false

    const permissions = {
      admin: ['view_all', 'edit_all', 'delete_all', 'manage_users', 'system_admin'],
      engineer: ['view_all', 'edit_all', 'approve_dropdown'],
      user: ['view_own', 'edit_own', 'create_experiment']
    }

    return permissions[user.value.role]?.includes(permission) || false
  }

  return {
    token,
    user,
    loading,
    isAuthenticated,
    isAdmin,
    isEngineer,
    login,
    logout,
    initAuth,
    hasPermission
  }
})
